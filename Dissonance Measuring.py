import random
import numpy as np
import sounddevice as sd
import ast


# 设置参数
def sine_wave(frequency_spectrum, amplitudes=[1], duration=1, fs=44100):
    duration = duration  # 持续时间（秒）
    fs = fs  # 采样率（Hz）

    amplitudes = [amplitude / sum(amplitudes) / 10 for amplitude in amplitudes]
    # 生成时间序列
    t = np.linspace(0, duration, int(fs * duration), endpoint=False)

    # 生成正弦波信号
    x = np.sum([amp * np.sin(2 * np.pi * freq * t) for freq, amp in zip(frequency_spectrum, amplitudes)], axis=0)

    # 播放信号
    sd.play(x, fs)
    sd.wait()


def test_main(round, interval_1, interval_2):
    import time
    # print(interval_1, interval_2)
    random_note_1 = random.randrange(300, 1000) / (interval_1 ** (1 / 2))
    random_note_2 = random_note_1 * interval_1

    random_note_3 = random.randrange(300, 1000) / (interval_2 ** (1 / 2))
    random_note_4 = random_note_3 * interval_2

    sine_wave([random_note_1], duration=1)
    sine_wave([random_note_2], duration=1)
    time.sleep(1)
    sine_wave([random_note_3], duration=1)
    sine_wave([random_note_4], duration=1)

    answer = input("测试次数： " + str(round) + " 哪一个旋律音程更不协和? 前 = 0, 后 = 1: ")
    data_to_be_collected = [answer, random_note_1, random_note_2, random_note_3, random_note_4]
    return data_to_be_collected


# test_main(1,40,62)

def elo(value_A, value_B, A_win_or_lose, difference_scale=10):
    # right win = 1, left win = 0, 可以为浮点
    # difference_scale = 10
    A_win_or_lose = float(A_win_or_lose)
    value_B = float(value_B)
    value_A = float(value_A)
    if value_A == value_B or A_win_or_lose == 0.5:
        value_A -= difference_scale / 2 * (A_win_or_lose - 0.5) * 2
        value_B += difference_scale / 2 * (A_win_or_lose - 0.5) * 2
        return value_A, value_B
    e = 2.7182818
    difference_between_B_and_A = (value_B - value_A) * -1 * (A_win_or_lose - 0.5) * 2 / difference_scale
    difference_score = e ** difference_between_B_and_A * (
            e ** difference_between_B_and_A - difference_between_B_and_A - 1) / (
                               -1 + e ** difference_between_B_and_A) ** 2 * difference_scale
    value_A -= difference_score * (A_win_or_lose - 0.5) * 2
    value_B += difference_score * (A_win_or_lose - 0.5) * 2
    return value_A, value_B


# print(elo(0, 15, 0.7))

def plot_by_matplotlib(ranking):
    import matplotlib
    import matplotlib.pyplot as plot
    matplotlib.use("TkAgg")
    x_list = [1 + i * 1 / 48 for i in range(0, len(ranking))]
    plot.plot(x_list, ranking)
    for i in range(len(x_list)):
        plot.annotate(
            f'({[round(elements, 3) for elements in x_list][i]}, {[round(elements, 0) for elements in ranking][i]})',
            ([round(elements, 3) for elements in x_list][i], [int(round(elements)) for elements in ranking][i]),
            textcoords="offset points", xytext=(0, 10), ha='center')
    plot.xlabel("Ratio")
    plot.ylabel("Dissonance")
    plot.show()
    return


def main():
    print("这是一个关于测试人们对音程感受的程序。让我们开始吧！")
    print("本测试采用了比较法，这是为了规避评分法的高度不确定性，以及尽量减少知识对结论的干扰。请尽量关注于需要测量的概念本身，而非关注于已知的测量答案。")
    print("由于算法的设计，在约250次之后，会得到较为准确的结果，相当于每一个音程大约都被测量了5次。")
    # current_ranking = [random.uniform(0,0.1) for i in range(0,80)]
    # 步长为2
    step = 1
    samples = 48
    step_for_counting_intervals = 1 / 48
    # samples必须为step的整数倍
    # we don't need =1 in detail.
    # current_ranking = [-2.7303450423842275, 50.967373881578176, 37.86447605007931, 37.63152879610842, 24.494146778392167, -3.9985977279948726, -23.647007431814075, -4.4973739915883035, 15.397121414452108, -29.488587969333405, 1.815225276486168, -13.694993660469784, -4.116703843842804, 0.849398073905431, 1.1201446947621374, 1.5755375709809263, -18.127160462538, 9.782895877999596, 15.756264104937785, 0.8604631853768092, 16.002460577264657, 21.009182582414773, 0.9938931017523167, -30.815103874950623, -21.68925628327795, -8.979522433579664, -4.750495114261736, -14.182531931775134, -11.797324709157213, 1.5650092280018102, 21.169298232548368, 5.8295680091449755, 0.6033746443930577, 10.313954018232469, 6.1985795561838115, -9.401619989845365, 1.032638703998784, 14.691206842779163, 0.7071409776859889, 11.80976360423261, 15.840367279846799, 35.712330375875695, 26.235883296707648, 5.938182901152318, 26.51559278516764, 20.690157940088913, 15.928473837840018, 25.054105244945628]
    current_ranking = input("现在的排名是什么，请在此处黏贴（带左右括号不带中文字），如果没有做过本测试输入None: ")
    if current_ranking == "None":
        current_ranking = [0 for i in range(0, samples, step)]
        test_time_list = [0 for i in range(0, samples, step)]
        answer_list = []
    else:
        current_ranking = ast.literal_eval(current_ranking)
        test_time_list = ast.literal_eval(input("现在的测试次数是什么，请在此处黏贴（带左右括号不带中文字）"))
        answer_list = ast.literal_eval(input("目前已有的回答是什么，请在此处黏贴（带左右括号不带中文字）"))

    # test_time_list = [0 for i in range(0, samples, step)]
    # test_time_list = [15, 9, 9, 10, 12, 8, 9, 9, 12, 12, 9, 10, 9, 14, 10, 8, 9, 9, 9, 11, 10, 11, 10, 9, 9, 9, 9, 9, 11, 10, 19, 11, 10, 10, 9, 9, 9, 9, 13, 9, 8, 9, 10, 10, 9, 9, 9, 12]
    # test_time_list = ast.literal_eval(input("现在的测试次数是什么，请在此处黏贴（带左右括号不带中文字）"))


    # answer_list = [['0', 732, 1311.5, 315, 347.8125], ['0', 403, 579.3125, 924, 1501.5], ['0', 487, 700.0625, 560, 898.3333333333333], ['0.2', 743, 1006.1458333333333, 731, 1096.5], ['0', 588, 967.75, 334, 528.8333333333333], ['0.5', 503, 985.0416666666666, 509, 731.6875], ['1', 474, 572.75, 626, 652.0833333333334], ['1', 505, 547.0833333333333, 644, 670.8333333333334], ['0', 780, 991.2499999999999, 906, 1000.3750000000001], ['0', 880, 1283.3333333333333, 993, 1241.25], ['1', 491, 787.6458333333333, 971, 1254.2083333333333], ['0', 672, 1204.0, 801, 1551.9375], ['1', 879, 1172.0, 648, 1053.0], ['1', 595, 756.1458333333333, 824, 1339.0], ['1', 476, 535.5, 913, 970.0625], ['1', 755, 1352.7083333333333, 637, 690.0833333333333], ['1', 988, 1770.1666666666665, 695, 1288.6458333333333], ['0', 877, 1352.0416666666665, 988, 1173.25], ['0', 921, 1592.5624999999998, 407, 474.83333333333337], ['0.5', 588, 1163.75, 735, 811.5625], ['1', 704, 982.6666666666666, 465, 658.7499999999999], ['1', 656, 1038.6666666666665, 763, 1510.1041666666665], ['1', 569, 865.3541666666666, 866, 1064.4583333333335], ['1', 778, 1134.5833333333333, 941, 1215.4583333333333], ['1', 515, 847.6041666666666, 711, 725.8125], ['0', 679, 1273.125, 477, 556.5], ['0.5', 430, 851.0416666666666, 863, 1438.3333333333333], ['1', 522, 587.25, 490, 939.1666666666666], ['1', 752, 752.0, 976, 1159.0], ['0', 990, 1381.875, 946, 1202.2083333333333], ['0', 878, 1627.9583333333333, 856, 1034.3333333333333], ['0', 669, 1059.25, 574, 574.0], ['1', 343, 578.8125, 806, 856.375], ['1', 356, 356.0, 302, 396.375], ['1', 711, 1155.375, 466, 893.1666666666666], ['0.5', 530, 761.875, 588, 600.25], ['1', 320, 360.0, 843, 1229.375], ['0', 703, 1303.4791666666665, 300, 325.0], ['0', 564, 646.25, 386, 643.3333333333333], ['1', 726, 771.375, 625, 677.0833333333333], ['0', 986, 1396.8333333333333, 592, 727.6666666666667], ['0', 859, 1324.2916666666665, 397, 785.7291666666666], ['0', 586, 915.625, 569, 1019.4583333333333], ['1', 799, 832.2916666666667, 886, 1642.7916666666665], ['0', 361, 451.25, 867, 975.375], ['0', 925, 1156.25, 487, 740.6458333333333], ['0', 460, 527.0833333333333, 642, 949.6249999999999], ['1', 588, 869.7499999999999, 879, 1538.25], ['0', 935, 1441.4583333333333, 596, 1067.8333333333333], ['1', 841, 1243.9791666666665, 766, 893.6666666666667], ['1', 328, 553.5, 778, 1377.7083333333333], ['1', 453, 887.125, 650, 839.5833333333333], ['1', 500, 979.1666666666666, 977, 1709.75], ['1', 780, 1040.0, 466, 592.2083333333333], ['0', 994, 1594.5416666666665, 664, 1009.8333333333333], ['0', 969, 1857.2499999999998, 696, 985.9999999999999], ['0.5', 419, 515.0208333333334, 665, 1080.625], ['0', 963, 1885.875, 769, 977.2708333333333], ['0', 744, 1007.4999999999999, 815, 1256.4583333333333], ['1', 483, 764.75, 926, 1832.7083333333333], ['1', 544, 623.3333333333333, 770, 1058.75], ['1', 910, 1573.5416666666665, 774, 1499.625], ['0', 887, 1238.1041666666665, 328, 478.3333333333333], ['0', 903, 997.0625000000001, 378, 480.375], ['1', 651, 895.125, 800, 1550.0], ['0.5', 374, 490.875, 416, 658.6666666666666], ['1', 931, 1629.25, 489, 692.7499999999999], ['1', 337, 456.35416666666663, 960, 1700.0], ['0', 742, 1344.875, 737, 1197.625], ['0', 309, 579.375, 665, 1149.8958333333333], ['1', 992, 1591.3333333333333, 427, 693.875], ['1', 406, 609.0, 605, 970.5208333333333], ['0', 947, 1578.3333333333333, 802, 952.375], ['0', 402, 678.375, 755, 1163.9583333333333], ['0', 701, 1314.375, 676, 943.5833333333333], ['1', 388, 468.8333333333333, 831, 1506.1875], ['1', 490, 867.7083333333333, 770, 1491.875], ['1', 586, 1110.9583333333333, 909, 1249.875], ['0', 670, 683.9583333333333, 659, 947.3125], ['0', 876, 1441.75, 925, 1503.125], ['1', 481, 721.5, 445, 676.7708333333333], ['0', 918, 1243.1249999999998, 531, 896.0625], ['0', 950, 1563.5416666666665, 834, 1198.875], ['0', 819, 1484.4375, 501, 824.5625], ['1', 359, 538.5, 672, 882.0], ['0', 285.0246742565719, 457.22708161991744, 582.2153252289971, 885.4524737857664], ['0', 483.3028159863116, 674.6101806475599, 796.6116817048137, 1161.7253691528533], ['1', 739.2, 1155.0, 506.3428980787453, 970.4905546509284], ['0', 699.4397758206206, 757.7264238056723, 220.06073087837655, 417.19846895692217], ['1', 853.4862094242762, 1102.4196871730232, 446.4115929776327, 809.1210122719593], ['1', 440.30334371062713, 532.0332069836744, 748.4858481862333, 1200.6960481320825], ['0', 907.3036977771003, 1058.5209807399503, 722.698692402304, 1204.4978206705066], ['1', 779.411098443792, 860.599754531687, 465.9719370883253, 757.2043977685287], ['1', 605.3334041009814, 1046.7223445912803, 231.59708396766482, 414.9447754420661], ['1', 424.80435833115325, 619.5063558995985, 367.24418672448286, 627.3754856543248], ['0', 924.259703762963, 1001.2813457432098, 630.9885577409466, 657.2797476468194], ['1', 282.4, 441.24999999999994, 815.0973936861963, 1137.7401120203156], ['0', 327.9191537994867, 478.21543262425143, 546.2539322426576, 603.1553835179344], ['0', 323.8935010153801, 431.8580013538401, 324.3539416317533, 493.28828623162474], ['0', 746.1018697202145, 1305.6782720103754, 218.66441790921192, 428.21781840554], ['0', 570.0921515198133, 581.9690713431428, 295.5931269554431, 560.3953031863608], ['1', 370.2672631408915, 601.6843026039487, 462.901999206706, 665.4216238596399], ['0', 329.21925075622954, 500.68761052509905, 582.5293306372063, 922.3381068422432], ['1', 340.6718396427586, 610.3703793599424, 414.767404698103, 483.8953054811202], ['0', 648.2666118195507, 1283.027669226194, 773.9771628728129, 1193.214792762253], ['0', 837.790500708216, 907.6063757672339, 317.255647810115, 588.2448469812549], ['1', 287.4563834980763, 521.0146950902633, 523.5742155451063, 534.482011702296], ['0', 467.34159906086467, 915.2106314941933, 255.04823073293412, 371.9453364855289], ['0', 557.992642849065, 1104.3604389721077, 509.6078376047097, 859.9632259579475], ['0', 452.08066350573927, 894.7429798551088, 828.6089892964335, 966.7104875125058], ['1', 598.6837414046103, 673.5192090801866, 519.8203977352556, 660.605088788554], ['0', 658.7856597213888, 1207.7737094892127, 714.0877477421174, 907.4865127556075], ['1', 522.9611573463399, 936.9720735788588, 644.7532297497448, 1182.0475878745322], ['1', 583.0833618759428, 1056.8385934001465, 625.5248926336568, 1198.9227108811754], ['1', 538.2286998417433, 1009.1788122032686, 861.4865401290547, 915.3294488871206], ['0', 307.5015064525509, 435.62713414111374, 722.697170327932, 903.371462909915], ['0', 629.1405615232944, 1022.3534124753535, 821.0841613379228, 1026.3552016724034], ['1', 731.501914452353, 899.137769847684, 770.344178822787, 1251.8092905870287], ['0', 796.9126634101433, 962.9361349539231, 534.3376741349987, 712.4502321799982], ['0', 283.7148308833324, 449.21514889860964, 888.0, 888.0], ['0', 553.4005696384767, 726.3382476505006, 759.5042791189527, 1012.6723721586036], ['1', 373.6190204122284, 677.1844744971639, 488.3348930211065, 630.7659034855958], ['0', 567.9932638914717, 816.4903168439905, 686.4064729836441, 1115.4105185984217], ['1', 334.23571549658413, 515.2800613905672, 745.1619958103071, 1241.936659683845], ['0', 628.2020676803268, 968.478187673837, 880.0387551274748, 1045.0460217138764], ['0.5', 312.08343082677453, 383.6025503912437, 358.6382578588068, 597.730429764678], ['0', 684.3868168429995, 1040.8382839487283, 828.8975173926042, 915.2410087876672], ['0', 519.356945042267, 714.115799433117, 381.2149000235956, 714.7779375442417], ['0', 740.5530086500829, 1342.2523281782753, 604.8794000522707, 995.5306792526956], ['0', 463.04820412594444, 588.4570927433876, 297.64597554907976, 440.26800549968044], ['1', 659.9120175960899, 852.386356061616, 702.709561108092, 966.2256465236264], ['0', 624.3664941261196, 1027.6031882492384, 545.2028556841517, 885.9546404867465], ['0', 683.9126331600538, 698.1608130175549, 334.1465735037091, 619.5634383714605], ['1', 845.5884432657623, 1145.0676835890529, 612.4473566812762, 1084.5421941230934], ['0.5', 358.9414154970643, 620.6695309636737, 248.78009342333027, 445.73100071680005], ['1', 726.7453636105371, 1029.5559317815942, 730.227361853827, 1277.8978832441971], ['1', 262.2902381219791, 387.970977222094, 720.3654043535639, 855.4339176698571], ['1', 779.3066018333329, 957.8976980868051, 717.7850546057537, 1166.4007137343497], ['0', 520.7377691082376, 987.2320206010337, 631.2006699254094, 1104.6011723694664], ['0', 834.3225501249855, 886.467709507797, 725.7352384744979, 997.8859529024346], ['1', 713.2186393990324, 861.8058559404975, 464.75800154489, 774.5966692414833], ['0', 433.46738735874294, 749.5373573078263, 561.062613095859, 1005.2371817967472], ['1', 286.4, 447.49999999999994, 415.803056528186, 762.3056036350076], ['0', 301.9288715546443, 434.02275285980113, 867.564332466326, 1120.603929435671], ['0', 485.0, 485.0, 595.2919510981595, 880.5360109993609], ['0', 799.3501527282439, 1199.0252290923659, 465.70557674406945, 737.3671631781099], ['0', 569.2284894229484, 972.4320027642035, 425.17978097958303, 690.9171440918224], ['0', 386.7605689634325, 491.50822305769543, 875.6442199889176, 1094.555274986147], ['1', 364.2714337130416, 470.51726854601196, 600.9819812375009, 989.1161774533869], ['0', 662.9517966984951, 814.8782501085669, 590.324173769791, 897.784680941557], ['1', 531.5392741839497, 797.3089112759246, 390.5774571067819, 520.7699428090425], ['1', 711.8347955244975, 993.602735419611, 762.3351201689701, 1254.6765519447633], ['0', 314.048427944385, 346.7618058552585, 748.5903790161584, 842.1641763931782], ['0', 398.679559677127, 573.10186703587, 735.8326722285354, 1211.0579397094646], ['0', 474.1583931748776, 651.9677906154567, 570.1243357740119, 1080.8607199048975], ['0', 560.2771870385136, 887.1055461443132, 734.0, 734.0], ['0', 395.37012843857906, 642.4764587126909, 682.7952518377697, 839.2691637172586], ['0', 630.5789805775869, 880.1831603895483, 322.7458893478104, 591.7007971376524], ['1', 790.7128234895204, 856.6055587803137, 981.8253720619007, 1002.2800673131902], ['1', 799.8133653264609, 1033.0922635466786, 390.6633411952626, 634.8279294423018], ['0', 598.1694428445348, 1059.2583883705304, 509.54800795783035, 923.5557644235676], ['0', 358.7502115479715, 470.85965265671257, 622.246874169564, 751.8816396215564], ['1', 437.1498598878879, 473.5790148785452, 373.5048625559528, 396.84891646569986], ['0', 344.87056079593646, 581.9690713431428, 612.1776260066457, 1058.5571449698248], ['0', 660.9475114585317, 1280.5858034509051, 258.39926822299986, 355.2989938066248], ['1', 387.8493504494597, 476.7314932607942, 557.2969457248853, 812.7247125154577], ['1', 326.95060124149325, 469.99148928464655, 655.139812492756, 1255.6846406111156], ['1', 662.7957896845223, 1173.7008775663417, 711.3318213042348, 740.9706471919113], ['1', 436.8, 682.5, 577.4796568697122, 733.880397271926], ['1', 295.8400948183455, 579.3535190192599, 483.9367970400802, 685.5771291401136], ['0.5', 384.93635837629057, 505.2289703688814, 411.7850989799601, 531.8890861824484], ['1', 706.1799673889535, 1206.3907776227954, 389.87887665470987, 633.5531745639036], ['1', 761.660236450265, 904.4715307846897, 351.878150157323, 630.4483523652036], ['0.5', 595.2416193159326, 1016.871099664718, 739.0113437788126, 1185.4973639785119], ['1', 709.991037075309, 813.5313966487915, 678.6261331332802, 791.7304886554936], ['1', 301.7369074049819, 584.6152580971524, 420.3873989755061, 805.7425147030532], ['0.5', 582.7151182961612, 1068.3110502096288, 830.2933315361762, 1055.1644421605572], ['0', 514.2013117554145, 974.8399868696399, 299.6308176167326, 418.2346829233559], ['0.5', 577.5452756750292, 1058.83300540422, 744.2479755970639, 945.815135654602], ['0', 549.1168854134371, 743.595782330696, 316.63047412221255, 369.402219809248], ['0', 707.7101515003054, 1209.004842146355, 661.6362244515437, 1061.3747767243512], ['0', 338.9357806644706, 579.0152919684706, 300.1037915693264, 525.1816352463212], ['1', 452.87104634253734, 613.2628752555192, 294.2789224707171, 582.4270340566275], ['1', 369.0084995325619, 422.8222390477272, 671.7142249498667, 1315.4403571934888], ['0.5', 334.4431464117903, 383.2161052635097, 569.5913563714008, 984.9183870588805], ['0', 426.211215244273, 443.97001587945107, 301.68144176878417, 326.8215619161828], ['1', 282.6389923559734, 353.29874044496677, 385.42307065901804, 425.5713071859991], ['0', 701.0848736066126, 1314.5341380123987, 839.6434211180755, 1172.002275310647], ['0.5', 522.2922182938614, 1011.9411729443565, 226.19152667943385, 419.39678905145024], ['0', 609.0975739119756, 697.9243034408053, 691.2664124721006, 1195.314838233007], ['0', 692.681745103767, 735.9743541727524, 517.8999399749791, 992.64155161871], ['1', 355.87378920925585, 674.6773920425475, 654.7352601392148, 941.1819364501213], ['1', 853.9010481314566, 1138.534730841942, 836.9402401111095, 1011.3027901342572], ['0', 760.0, 760.0, 605.158668519676, 895.1305305186874], ['1', 510.31640113589594, 871.7905186071555, 631.4939551449527, 1026.177677110548], ['1', 408.04774807108345, 722.584553875877, 710.1078346575999, 1405.4217560931666], ['0', 518.5106877715573, 972.2075395716699, 444.4790999919685, 842.6582937347736], ['0', 690.5432643940567, 1265.9959847224372, 488.3813044204935, 681.6989040869388], ['0.5', 263.60721140507883, 345.98446496916597, 778.4884454763987, 1248.8252146183895], ['1', 331.2763197090912, 393.39062965454576, 893.5327638089159, 1116.9159547611448], ['1', 759.7929542535475, 1282.1506103028614, 832.3122696955237, 971.0309813114444], ['1', 570.7311100684806, 856.0966651027209, 534.8461657828647, 846.8397624895357], ['0.5', 382.40534273705714, 517.8405682897649, 844.3479309925668, 985.0725861579947], ['1', 796.084166404533, 1194.1262496067995, 845.0, 845.0], ['0', 570.2412121199238, 594.0012626249207, 296.1491985909923, 567.6192972994019], ['0.5', 755.1900423072328, 849.588797595637, 588.2219416441203, 698.5135557023929], ['0.5', 783.2, 1223.75, 645.4834856389109, 1156.4912451030486], ['1', 609.6, 952.5, 685.0791161237053, 1227.4334163883052], ['0', 776.0, 776.0, 455.37676708413665, 512.2988629696538], ['1', 955.0, 955.0, 622.2653013491577, 985.2533938028329], ['0', 639.0, 639.0, 769.9192028696052, 914.2790534076562], ['0', 415.1838147134351, 691.9730245223917, 577.4796568697122, 733.880397271926], ['0.5', 265.49310393171066, 376.1152305699234, 272.3523897009611, 516.3347388080721], ['1', 292.39743169958956, 566.5200239179547, 389.2256790262985, 721.6892798612618], ['1', 461.78783006917797, 490.6495694485016, 650.2613603272871, 663.8084720007722], ['0', 719.7633355897334, 1214.600628807675, 783.7927369818213, 898.095844458337], ['0.5', 257.35687941122086, 380.67371746243083, 574.8135929731192, 862.2203894596787], ['0', 742.4515195105533, 1314.7578991332714, 707.771256762193, 1164.8735267544428], ['0', 677.7153778197255, 1270.7163334119853, 515.0929307151548, 708.2527797333379], ['0', 629.243701886349, 1153.6134534583064, 450.5416149873872, 741.5164080000748], ['0.5', 791.6945057761803, 1039.0990388312366, 566.891180377337, 909.3879351886447], ['1', 711.0068565070242, 948.0091420093655, 942.0, 942.0], ['0.5', 477.7918439591096, 647.0097886946276, 328.66613541925574, 383.4438246557984], ['1', 686.3834829847566, 1201.171095223324, 373.7303613284896, 731.8886242682921], ['0.5', 472.82689040777166, 807.7459377799432, 420.0840252084029, 595.1190357119041], ['1', 784.0, 1225.0, 886.3773462809166, 1107.9716828511457], ['1', 448.7465208778782, 467.44429258112314, 818.8002701226601, 869.9752870053263], ['0', 648.9774304728616, 1284.4344978108718, 439.07139773354896, 475.66068087801136], ['0', 343.6936184609579, 637.2652508963594, 704.4212854311127, 1394.1671274157436], ['0', 553.0, 553.0, 370.3392470353863, 586.3704744726949], ['1', 561.3208026416453, 806.8986537973651, 223.47080346210777, 419.0077564914521], ['0', 425.8772458953736, 496.8567868779359, 460.88501819868264, 768.1416969978044], ['1', 816.0, 816.0, 538.552850158453, 650.7513606081307], ['0', 909.0, 909.0, 635.8925396903932, 781.6179133694417], ['0.5', 692.0218365212346, 778.524566086389, 906.65098025646, 1076.6480390545462], ['0.5', 279.46584995366175, 541.4650842852196, 417.8628857703779, 600.6778982949182], ['1', 311.10822781110227, 550.9208200821603, 726.3413056598753, 786.8697477981982], ['0.5', 409.6300159900395, 546.173354653386, 622.4, 972.5], ['0.5', 545.5720600683953, 625.1346521617029, 328.5980046327863, 506.58859047554546], ['0', 402.69611371355444, 419.4751184516192, 319.869973583017, 599.7562004681569], ['0', 664.6282168751691, 996.9423253127536, 280.80485825756756, 333.45576918086147], ['1', 230.29270875847777, 393.41671079573285, 798.1596478959656, 1130.726167852618], ['0', 267.8905249039864, 452.065260775477, 653.759588839812, 1089.5993147330198], ['0.5', 273.2694359334476, 370.0523611598769, 282.51673172345687, 476.74698478333346], ['0.5', 284.22928370293886, 497.401246480143, 626.8555541065946, 914.1643497387837], ['0', 573.0613814756457, 585.0001602563883, 788.7258526181548, 838.0212184067894], ['0', 573.8154496114287, 1123.7219221557145, 650.7406431254964, 1233.695802592087], ['0.5', 463.7357188112734, 685.9424174083418, 809.3787090953418, 961.1372170507184]]

    # ensure
    index_and_interval_matching_list = [ 2 ** (i * step_for_counting_intervals) for i in range(0, samples)]

    time_for_testing = len(answer_list)
    # this is starting point, but it is discarded.
    answer = test_main(time_for_testing, index_and_interval_matching_list[random.randrange(0, samples, step)],
                       index_and_interval_matching_list[random.randrange(0, samples, step)])

    while answer[0] != "stop":
        # 考虑次数
        if time_for_testing <= 80:
            current_ranking = [items + random.uniform(0, 0.1) for items in current_ranking]

        time_for_testing += 1
        minimum_limitation = round(sum(test_time_list) / len(test_time_list) - 2)
        if min(test_time_list) <= minimum_limitation:
            difference_1 = index_and_interval_matching_list[random.choice(
                [index for index, repeat_time in enumerate(test_time_list) if
                 repeat_time <= minimum_limitation]) * step]
        else:
            if random.randrange(0,2) == 1:
            # sharpness_prepare_list = current_ranking.insert(0, current_ranking[1]).insert(len(current_ranking), current_ranking[len(current_ranking) - 1])
                sharpness_prepare_list = current_ranking[:]
                sharpness_prepare_list.insert(0, current_ranking[1])
                sharpness_prepare_list.insert(len(current_ranking), current_ranking[len(current_ranking) - 1])
                sharpness_list = [0 if abs(sharpness_prepare_list[i + 1] + sharpness_prepare_list[i - 1] - sharpness_prepare_list[i] * 2) <= 15 else abs(sharpness_prepare_list[i + 1] + sharpness_prepare_list[i - 1] - sharpness_prepare_list[i] * 2)
                                  for i in range(1, len(sharpness_prepare_list) - 1)]
                sharpness_list = [abs(elements) for elements in sharpness_list]
                if max(sharpness_list) > 15:
                        difference_1 = index_and_interval_matching_list[sharpness_list.index(random.choice([elements for elements in sharpness_list if elements > 15]))]
                else:
                    difference_1 = index_and_interval_matching_list[random.randrange(0, samples, step)]

        minimum_list = [
            1000 if index_and_interval_matching_list[current_ranking.index(items) * step] == difference_1 else abs(
                items - current_ranking[index_and_interval_matching_list.index(difference_1) * step]) for items in
            current_ranking]
        # print(minimum_list)
        # print( difference_1, minumum_list.index(min(minumum_list)) * step)

        # getting answer and make it into a list
        difference_2 = index_and_interval_matching_list[minimum_list.index(min(minimum_list))]
        answer = test_main(time_for_testing, difference_1, difference_2)
        answer_list.append(answer)

        if answer[0] == "stop":
            # 只需要复制current_ranking。
            print("当前排名", current_ranking)
            print("测试次数", test_time_list)
            print("回答列表" ,answer_list[0:len(answer_list) - 1])
            print("请黏贴并妥善保存，以便随后继续用")
            plot_by_matplotlib(current_ranking)
            # print(test_time_list)
            return
        # print(current_ranking)
        # lost_win_list = [[int(sublists[0]), sublists[2] - sublists[1], sublists[4] - sublists[3]] for sublists in answer_list]
        test_time_list[index_and_interval_matching_list.index(difference_1)] += 1
        test_time_list[minimum_list.index(min(minimum_list))] += 1

        # 使用answer，此处需要对不同interval做出不同调整
        answer = [int(items) if answer.index(items) != 0 else float(items) for items in answer]
        # 知道是第几位的elo
        elo_final_list = elo(current_ranking[index_and_interval_matching_list.index(difference_1)],
                             current_ranking[index_and_interval_matching_list.index(difference_2)], answer[0])
        current_ranking[index_and_interval_matching_list.index(difference_1)] = elo_final_list[0]
        current_ranking[index_and_interval_matching_list.index(difference_2)] = elo_final_list[1]


main()

plot_by_matplotlib([-21.28356334690344, 41.878123388019624, 34.16243851299032, 41.35600016726694, 24.333730947035328, -3.9985977279948726, -19.0804227892225, 0.5678711740758171, 10.327481765727688, -19.356727989974196, -3.3585134349144568, -8.935902716298813, -9.10026281159541, 5.875397457556896, 1.1201446947621374, 1.5755375709809263, -13.297547629982496, 9.782895877999596, 20.74908085856438, 0.8604631853768092, 10.953438292685817, 26.05398465470145, 0.9938931017523167, -30.815103874950623, -22.426930318186294, -8.979522433579664, -4.750495114261736, -4.175512835353474, -11.619842057006291, 1.5650092280018102, 21.169298232548368, 16.09823093391615, 5.719359630931228, 0.17636413110313498, 11.247601840762652, -9.401619989845365, 6.059249194269745, 14.469199787418578, -4.316319150983063, 11.80976360423261, 10.842968961196362, 25.923459234829608, 20.792325623408182, 10.940500688136016, 30.988348292042854, 25.64350363180131, 5.899545560585361, 25.000788974876002]
                   )
